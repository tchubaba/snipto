{"version":3,"file":"snipto.js","sources":["../../resources/js/standalone/snipto.js"],"sourcesContent":["import QRCode from 'qrcode';\n\nexport function sniptoComponent() {\n    /**\n     * Alpine.js component for Snipto frontend logic.\n     *\n     * Responsibilities:\n     * - Submitting a new Snipto: encrypting user text client-side and sending only ciphertext + IV to the server.\n     * - Viewing a Snipto: fetching ciphertext from server, deriving the AES key from the short secret in the URL,\n     *   decrypting locally, and showing the plaintext only to the client.\n     * - Ensuring end-to-end encryption (E2EE): the server never sees the plaintext or the secret key.\n     */\n    return {\n        slug: null, // Unique identifier of the Snipto (URL slug)\n        key: null,          // Derived AES-CBC CryptoKey object\n        iv: null,           // Initialization Vector (hex string)\n        payload: '',        // Decrypted plaintext payload\n        expires_at: '',     // Expiry time of this Snipto (from server)\n        views_remaining: 0, // How many times this Snipto can still be viewed\n        loading: true,      // UI state: true while fetching/decrypting\n        showPayload: false, // UI toggle: decrypted content visible\n        showForm: false,    // UI toggle: show new snipto form\n        showSuccess: false, // UI toggle: show success screen\n        errorMessage: '',   // Error messages for user\n        userInput: '',      // Text entered when creating a new Snipto\n        fullUrl: '',        // Full shareable URL (with key in hash)\n        showToast: false,   // Toast notification state\n        calledInit: false,  // Prevent multiple init calls\n\n        // ------------------------------\n        // Initialization (view mode)\n        // ------------------------------\n        /**\n         * Fetch an existing Snipto (if slug present), derive key, and decrypt payload.\n         * Handles error cases (missing key, invalid ciphertext, expired/deleted sniptos).\n         */\n        async init() {\n            this.slug = this.$el.dataset.slug || '';\n            if (this.calledInit) return;\n            this.calledInit = true;\n\n            // Respect user system theme\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                document.documentElement.classList.add('dark');\n            }\n\n            // If no slug is present, user is creating a new Snipto\n            if (!this.slug) {\n                this.showForm = true;\n                this.loading = false;\n                this.$nextTick(() => setTimeout(() => this.$refs.textarea?.focus(), 100));\n                return;\n            }\n\n            try {\n                // Request metadata + ciphertext from server\n                const res = await fetch(`/api/snipto/${this.slug}`, {\n                    method: 'GET',\n                    headers: { 'Accept': \"application/json\" }\n                });\n\n                if (res.status === 404) {\n                    // Snipto does not exist → show create form\n                    this.showForm = true;\n                    this.$nextTick(() => setTimeout(() => this.$refs.textarea?.focus(), 100));\n                    return;\n                } else if (res.status === 429) {\n                    // Rate-limiting protection\n                    this.errorMessage = 'Whoa, take it easy! You’ve hit your snipto limit. Give it a minute before trying again.';\n                    return;\n                }\n\n                if (!res.ok) throw new Error('Error fetching snipto');\n\n                const data = await res.json();\n\n                // The short secret is delivered via URL fragment (#k=...) so the server never sees it\n                const shortSecret = new URLSearchParams(window.location.hash.substring(1)).get('k');\n                if (!shortSecret) {\n                    this.errorMessage = 'Missing decryption key in URL.';\n                    return;\n                }\n\n                // Save IV and derive the AES key (PBKDF2 w/ salt = IV)\n                this.iv = data.iv;\n                this.key = await this.deriveKey(shortSecret, this.iv);\n\n                // Attempt to decrypt ciphertext\n                let decrypted;\n                try {\n                    decrypted = await this.decryptPayload(data.payload, this.key, this.iv);\n                } catch {\n                    decrypted = '';\n                }\n\n                if (!decrypted) {\n                    this.errorMessage = 'Failed to decrypt your snipto. Please check your key.';\n                    return;\n                }\n\n                // Populate UI with decrypted plaintext\n                this.payload = decrypted.trim();\n                this.expires_at = data.expires_at;\n                this.views_remaining = data.views_remaining - 1;\n                this.showPayload = true;\n\n                // Compute SHA256 hash of ciphertext (as base64 string, not bytes)\n                const hashHex = await this.sha256Hex(new TextEncoder().encode(data.payload));\n\n                // Tell server this Snipto was viewed (without revealing plaintext or key)\n                await fetch(`/api/snipto/${this.slug}/viewed`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'X-CSRF-TOKEN': this.getCsrfToken(),\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify({ payload_hash: hashHex }),\n                    credentials: 'same-origin'\n                });\n\n            } catch(err) {\n                this.errorMessage = err.message;\n            } finally {\n                this.loading = false;\n            }\n        },\n\n        // ------------------------------\n        // Submission (create mode)\n        // ------------------------------\n        /**\n         * Encrypt and submit a new Snipto to the server.\n         * 1. Generate a random short secret (shared only via URL fragment).\n         * 2. Generate a random IV (16 bytes).\n         * 3. Derive AES key with PBKDF2 (salt = IV).\n         * 4. Encrypt user’s plaintext.\n         * 5. Send ciphertext + IV (never plaintext, never secret) to server.\n         * 6. Show success UI with shareable URL (#k=secret).\n         */\n        async submitSnipto() {\n            if (!this.userInput.trim()) return;\n\n            this.loading = true;\n\n            // Generate short secret (shared only in URL hash fragment)\n            const shortSecret = this.generateShortSecret(16);\n            this.iv = await this.generateRandomBytes(16);\n\n            // Derive AES key\n            this.key = await this.deriveKey(shortSecret, this.iv);\n\n            // Encrypt plaintext input\n            const encrypted = await this.encryptPayload(this.userInput, this.key, this.iv);\n\n            try {\n                // Submit ciphertext + IV to server\n                const res = await fetch('/api/snipto', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'X-CSRF-TOKEN': this.getCsrfToken(),\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        slug: this.slug,\n                        payload: encrypted,\n                        iv: this.iv\n                    }),\n                    credentials: 'same-origin'\n                });\n\n                if (res.status === 429) {\n                    this.errorMessage = 'Whoa, take it easy! You’ve hit your snipto limit. Give it a minute before trying again.';\n                    return;\n                }\n\n                const body = await res.json();\n                if (!res.ok || !body.success) {\n                    this.errorMessage = 'An error occurred. Please try again.';\n                    return;\n                }\n\n                // Show success + full shareable URL with embedded key\n                this.showForm = false;\n                this.showSuccess = true;\n                this.fullUrl = `${window.location.origin}/${this.slug}#k=${shortSecret}`;\n\n                // Render QR code for convenience\n                QRCode.toCanvas(this.$refs.qrcode, this.fullUrl, { width: 128 });\n                this.$refs.fullUrlInput.select();\n\n            } catch {\n                this.errorMessage = 'An error occurred. Please try again.';\n            } finally {\n                this.loading = false;\n            }\n        },\n\n        // ------------------------------\n        // Short secret generator\n        // ------------------------------\n        /**\n         * Generate a random alphanumeric secret of given length.\n         * This is shared only in the URL fragment (#k=...), never sent to the server.\n         */\n        generateShortSecret(length) {\n            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            let result = '';\n            const array = new Uint8Array(length);\n            window.crypto.getRandomValues(array);\n            for (let i = 0; i < length; i++) {\n                result += chars[array[i] % chars.length];\n            }\n            return result;\n        },\n\n        // ------------------------------\n        // AES key derivation (PBKDF2)\n        // ------------------------------\n        /**\n         * Derive a 256-bit AES-CBC key using PBKDF2-HMAC-SHA256.\n         * @param {string} secret - User’s short secret (from URL hash fragment).\n         * @param {string} ivHex - Initialization vector (hex), used as salt for PBKDF2.\n         * @returns {Promise<CryptoKey>}\n         */\n        async deriveKey(secret, ivHex) {\n            const enc = new TextEncoder();\n            const keyMaterial = await crypto.subtle.importKey(\n                'raw',\n                enc.encode(secret),\n                { name: 'PBKDF2' },\n                false,\n                ['deriveKey']\n            );\n\n            return crypto.subtle.deriveKey(\n                {\n                    name: 'PBKDF2',\n                    salt: enc.encode(ivHex), // Important: IV doubles as salt\n                    iterations: 100000,\n                    hash: 'SHA-256'\n                },\n                keyMaterial,\n                { name: 'AES-CBC', length: 256 },\n                false,\n                ['encrypt', 'decrypt']\n            );\n        },\n\n        // ------------------------------\n        // Encryption\n        // ------------------------------\n        /**\n         * Encrypt plaintext using AES-CBC.\n         * @param {string} plainText\n         * @param {CryptoKey} key\n         * @param {string} ivHex - IV in hex\n         * @returns {Promise<string>} base64 ciphertext\n         */\n        async encryptPayload(plainText, key, ivHex) {\n            const enc = new TextEncoder();\n            const iv = this.hexToBytes(ivHex);\n            const cipherBuffer = await crypto.subtle.encrypt(\n                { name: 'AES-CBC', iv },\n                key,\n                enc.encode(plainText)\n            );\n            return this.bytesToBase64(new Uint8Array(cipherBuffer));\n        },\n\n        // ------------------------------\n        // Decryption\n        // ------------------------------\n        /**\n         * Decrypt ciphertext using AES-CBC.\n         * @param {string} base64Cipher - base64 encoded ciphertext\n         * @param {CryptoKey} key\n         * @param {string} ivHex - IV in hex\n         * @returns {Promise<string>} plaintext string\n         */\n        async decryptPayload(base64Cipher, key, ivHex) {\n            const cipherBytes = this.base64ToBytes(base64Cipher);\n            const iv = this.hexToBytes(ivHex);\n            const plainBuffer = await crypto.subtle.decrypt(\n                { name: 'AES-CBC', iv },\n                key,\n                cipherBytes\n            );\n            return new TextDecoder().decode(plainBuffer);\n        },\n\n        // ------------------------------\n        // SHA-256 hashing (hex output)\n        // ------------------------------\n        /**\n         * Compute SHA-256 of provided bytes.\n         * @param {Uint8Array} bytes\n         * @returns {Promise<string>} lowercase hex string\n         */\n        async sha256Hex(bytes) {\n            const hashBuffer = await crypto.subtle.digest('SHA-256', bytes);\n            return Array.from(new Uint8Array(hashBuffer))\n                .map(b => b.toString(16).padStart(2, '0'))\n                .join('');\n        },\n\n        // ------------------------------\n        // Utility: Random bytes\n        // ------------------------------\n        /**\n         * Generate cryptographically secure random bytes and return as hex string.\n         * @param {number} length - number of bytes\n         * @returns {Promise<string>}\n         */\n        async generateRandomBytes(length) {\n            const array = new Uint8Array(length);\n            window.crypto.getRandomValues(array);\n            return Array.from(array).map(b => ('00'+b.toString(16)).slice(-2)).join('');\n        },\n\n        // ------------------------------\n        // Utility: Encoding helpers\n        // ------------------------------\n        /** Convert hex string to Uint8Array */\n        hexToBytes(hex) {\n            const bytes = new Uint8Array(hex.length / 2);\n            for (let i = 0; i < bytes.length; i++) {\n                bytes[i] = parseInt(hex.substr(i*2, 2), 16);\n            }\n            return bytes;\n        },\n\n        /** Convert base64 string → Uint8Array */\n        base64ToBytes(base64) {\n            const binary = atob(base64);\n            const bytes = new Uint8Array(binary.length);\n            for (let i = 0; i < binary.length; i++) {\n                bytes[i] = binary.charCodeAt(i);\n            }\n            return bytes;\n        },\n\n        /** Convert Uint8Array → base64 string */\n        bytesToBase64(bytes) {\n            let binary = '';\n            for (let i = 0; i < bytes.length; i++) {\n                binary += String.fromCharCode(bytes[i]);\n            }\n            return btoa(binary);\n        },\n\n        // ------------------------------\n        // Clipboard helper\n        // ------------------------------\n        /**\n         * Copy the generated Snipto URL to clipboard and show a toast.\n         */\n        copyUrl() {\n            navigator.clipboard.writeText(this.fullUrl).then(() => {\n                this.showToast = true;\n                setTimeout(() => this.showToast = false, 2000);\n            });\n        },\n\n        // ------------------------------\n        // CSRF token helper\n        // ------------------------------\n        /** Fetch CSRF token from <meta> tag */\n        getCsrfToken() {\n            return document.querySelector('meta[name=\"csrf-token\"]').content;\n        }\n    }\n}\n\nwindow.sniptoComponent = sniptoComponent;\n"],"names":[],"mappings":"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"}